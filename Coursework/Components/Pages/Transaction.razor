@page "/transaction"
@inject DatabaseService.Services.dbTransaction dbTransaction
@inject DatabaseService.Services.dbDebt DebtService
@using Coursework.Models
@using DatabaseService.Services
@using Coursework.Shared

<div class="container mt-5">
    <h1 class="h2 mb-3 fw-bold text-black">Transaction Summary</h1>

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-4 col-sm-6">
            <div class="card text-white bg-success mb-3">
                <div class="card-header">Total Balance</div>
                <div class="card-body">
                    <h5 class="card-title">@balance.ToString("C")</h5>
                    <small class="text-white">Balance after all inflows and outflows</small>
                </div>
            </div>
        </div>
        <div class="col-md-4 col-sm-6">
            <div class="card text-white bg-danger mb-3">
                <div class="card-header">Cash Outflow</div>
                <div class="card-body">
                    <h5 class="card-title">@OutflowAmount.ToString("C")</h5>
                    <small class="text-white">Total expenses</small>
                </div>
            </div>
        </div>
        <div class="col-md-4 col-sm-6">
            <div class="card text-white bg-primary mb-3">
                <div class="card-header">Cash Inflow</div>
                <div class="card-body">
                    <h5 class="card-title">@inflowamount.ToString("C")</h5>
                    <small class="text-white">Total income</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Bottom Row with Remaining Cards -->
    <div class="row mb-4">
        <div class="col-md-6 col-sm-6">
            <div class="card text-white bg-info mb-3">
                <div class="card-header">Pending Debts</div>
                <div class="card-body">
                    <h5 class="card-title">@totalPendingDebts.ToString("C")</h5>
                    <small class="text-white">Uncleared debts</small>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-sm-6">
            <div class="card text-white bg-secondary mb-3">
                <div class="card-header">Total Number of Transactions</div>
                <div class="card-body">
                    <h5 class="card-title">@totalTransactionCount</h5>
                    <small class="text-white">Total numbers of recorded transactions</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Search Bar -->
    <div class="row mb-5 justify-content-center">
        <div class="col-md-8">
            <input
                type="text"
                class="form-control form-control-lg shadow-sm"
                placeholder="Search Transactions by Title, Type, Tags ..."
                @oninput="e => FilterTransaction(e.Value.ToString())"
            />
        </div>
    </div>

    <!-- Top 5 Latest Transactions -->
    <div class="row mt-4">
        <div class="col-md-12">
            <h2>Top 5 Latest Transactions</h2>
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Notes</th>
                    <th>Tags</th>
                    <th>Date</th>
                    <th>Type</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var transaction in filteredTransactions.Take(5))
                {
                    <tr>
                        <td>@transaction.Title</td>
                        <td>@transaction.Amount.ToString("C")</td>
                        <td>@transaction.Notes</td>
                        <td>@transaction.Tags</td>
                        <td>@transaction.Date.ToShortDateString()</td>
                        <td>@transaction.TransactionType</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>

    <!-- All Transactions Table -->
    <div class="row">
        <div class="col-md-12">
            <h2>All Transactions</h2>
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Date</th>
                    <th>Type</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var transaction in filteredTransactions)
                {
                    <tr>
                        <td>@transaction.Title</td>
                        <td>@transaction.Amount.ToString("C")</td>
                        <td>@transaction.Date.ToShortDateString()</td>
                        <td>@transaction.TransactionType</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Cash Outflow Table -->
    <div class="row mt-4">
        <div class="col-md-12">
            <h2>Cash Outflow</h2>
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Date</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var transaction in cashOutFlow)
                {
                    <tr>
                        <td>@transaction.Title</td>
                        <td>@transaction.Amount.ToString("C")</td>
                        <td>@transaction.Date.ToShortDateString()</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Cash Inflow Table -->
    <div class="row mt-4">
        <div class="col-md-12">
            <h2>Cash Inflow</h2>
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Date</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var transaction in cashInFlow)
                {
                    <tr>
                        <td>@transaction.Title</td>
                        <td>@transaction.Amount.ToString("C")</td>
                        <td>@transaction.Date.ToShortDateString()</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<TransactionModel> transactions = new List<TransactionModel>();
    private List<TransactionModel> filteredTransactions = new List<TransactionModel>();
    private List<TransactionModel> cashOutFlow = new List<TransactionModel>();
    private List<TransactionModel> cashInFlow = new List<TransactionModel>();
    private List<Debts> pendingDebts = new List<Debts>();

    private double balance;
    private double OutflowAmount;
    private double inflowamount;
    private double totalPendingDebts;
    private int totalTransactionCount;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        // Fetch all transactions
        transactions = await dbTransaction.GetTransactionsAsync();

        // Fetch debts
        var allDebts = await DebtService.GetDebtsAsync();
        pendingDebts = allDebts.Where(d => !d.IsCleared).ToList();

        // Categorize transactions
        filteredTransactions = transactions.ToList();
        cashOutFlow = transactions.Where(t => t.TransactionType == "Debit").OrderByDescending(t => t.Date).ToList();
        cashInFlow = transactions.Where(t => t.TransactionType == "Credit").OrderByDescending(t => t.Date).ToList();

        // Recalculate values
        await RecalculateBalance();
    }

    private async Task RecalculateBalance()
    {
        OutflowAmount = cashOutFlow.Sum(t => t.Amount);
        inflowamount = cashInFlow.Sum(t => t.Amount);
        totalPendingDebts = pendingDebts.Sum(d => d.Amount);
        balance = inflowamount - OutflowAmount + totalPendingDebts;

        totalTransactionCount = transactions.Count;

        StateHasChanged(); // Refresh the UI
    }

    private void FilterTransaction(string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredTransactions = transactions.ToList();
        }
        else
        {
            filteredTransactions = transactions
                .Where(t => t.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        StateHasChanged();
    }
}
