@page "/adddebts"
@inject NavigationManager NavigationManager
@inject DatabaseService.Services.dbDebt TransactionService
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics
@using Coursework.Models
@using DatabaseService.Services

<div class="transaction-container d-flex justify-content-center align-items-center vh-100 p-4" style="background-color: #96BCD4; max-width: 100%; border-radius: 10px;">
    <div class="card border-0 shadow-sm" style="background-color: #E1EBEE; border-radius: 10px; padding: 20px; width: 100%; max-width: 500px;">
        <h1 class="h2 mb-0 fw-bold text-black text-center">Debts</h1>
        
        <div class="card-body">
            <EditForm Model="@_debts" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- Transaction Title -->
                <div class="mb-4">
                    <label for="Debts" class="form-label fw-medium">Debts Title</label>
                    <InputText id="DebtsTitle" class="form-control" @bind-Value="_debts.Source"/>
                    <ValidationMessage For="@(() => _debts.Source)"/>
                </div>

                <!-- Transaction Amount -->
                <div class="mb-4">
                    <label for="amount" class="form-label fw-medium">Debts Amount</label>
                    <InputNumber id="amount" class="form-control" @bind-Value="_debts.Amount" />
                    <ValidationMessage For="@(() => _debts.Amount)" />
                </div>
                
                <!-- Due Date -->
                <div class="mb-4">
                    <label for="Date" class="form-label fw-medium">Debts Date</label>
                    <InputDate id="Date" class="form-control" @bind-Value="_debts.DueDate" />
                    <ValidationMessage For="@(() => _debts.DueDate)" />
                </div>
                
                <!-- Buttons -->
                <div class="d-grid gap-3 d-md-flex justify-content-md-end mt-4">
                    <button type="submit" class="btn btn-primary me-md-2 px-4">Add Debts</button>
                    <button type="button" class="btn btn-outline-secondary px-4" @onclick="ResetForm">Reset</button>
                </div>
            </EditForm>

            <!-- Status Message -->
            @if (!string.IsNullOrEmpty(_statusMessage))
            {
                <div class="mt-4 alert @(_statusMessage.Contains("error") ? "alert-danger" : "alert-success")">
                    @_statusMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Debts _debts = new Debts();
    private string _statusMessage = string.Empty;

    private async Task OnValidSubmit()
    {
        try
        {
            // Call the SaveTransactionAsync method with the correct model type
            var success = await Debts.SaveDebtsAsync(_debts);

            if (success)
            {
                _statusMessage = "Debts added successfully!";
                NavigationManager.NavigateTo("/transaction"); // Navigate to another page if needed
            }
            else
            {
                _statusMessage = "An error occurred while adding the transaction.";
            }
        }
        catch (Exception ex)
        {
            _statusMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void ResetForm()
    {
        _debts = new Debts();
        _statusMessage = string.Empty;
    }
}