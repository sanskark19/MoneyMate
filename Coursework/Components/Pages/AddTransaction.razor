@page "/addtransaction"
@inject NavigationManager NavigationManager
@inject DatabaseService.Services.dbTransaction TransactionService
@using System.ComponentModel.DataAnnotations
@using Coursework.Models
@using DatabaseService.Services

<div class="container mt-5">
    <h2>Register Customer</h2>

    <EditForm Model="@_transaction" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="TransactionTitle" class="form-label">Transaction Title</label>
            <InputText id="TransactionTitle" class="form-control" @bind-Value="_transaction.Title" />
            <ValidationMessage For="@(() => _transaction.Title)" />
        </div>

        <div class="mb-3">
            <label for="amount" class="form-label">Transaction Amount</label>
            <InputNumber id="amount" class="form-control" @bind-Value="_transaction.Amount" />
            <ValidationMessage For="@(() => _transaction.Amount)" />
        </div>

        <div class="mb-3">
            <label for="TransactionType" class="form-label">Transaction Type</label>
            <select id="TransactionType" class="form-control" @bind="_transaction.TransactionType">
                <option value="Credit">Credit</option>
                <option value="Debit">Debit</option>
            </select>
            <ValidationMessage For="@(() => _transaction.TransactionType)" />
        </div>

        <div class="mb-3">
            <label for="Notes" class="form-label">Notes (Optional)</label>
            <InputText id="Notes" class="form-control" @bind-Value="_transaction.Notes" />
            <ValidationMessage For="@(() => _transaction.Notes)" />
        </div>

        <div class="mb-3">
            <label for="Tags" class="form-label">Tags (Optional)</label>
            <InputText id="Tags" class="form-control" @bind-Value="_transaction.Tags" />
            <ValidationMessage For="@(() => _transaction.Tags)" />
        </div>

        <div class="mb-3">
            <label for="Date" class="form-label">Transaction Date</label>
            <InputDate id="Date" class="form-control" @bind-Value="_transaction.Date" />
            <ValidationMessage For="@(() => _transaction.Date)" />
        </div>

        <button type="submit" class="btn btn-primary">Register</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(_statusMessage))
    {
        <div class="mt-3 alert @(_statusMessage.Contains("error") ? "alert-danger" : "alert-success")">
            @_statusMessage
        </div>
    }
</div>

@code {
    private TransactionModel _transaction = new TransactionModel();
    private string _statusMessage = string.Empty;

    private async Task OnValidSubmit()
    {
        try
        {
            // Call the SaveTransactionAsync method with the correct model type
            var success = await TransactionService.SaveTransactionAsync(_transaction);

            if (success)
            {
                _statusMessage = "Transaction added successfully!";
                NavigationManager.NavigateTo("/"); // Navigate to another page if needed
            }
            else
            {
                _statusMessage = "An error occurred while adding the transaction.";
            }
        }
        catch (Exception ex)
        {
            _statusMessage = $"An error occurred: {ex.Message}";
        }
    }
}
