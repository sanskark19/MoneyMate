@page "/addtransaction"
@inject NavigationManager NavigationManager
@inject DatabaseService.Services.dbTransaction TransactionService
@using System.ComponentModel.DataAnnotations
@using Coursework.Models
@using DatabaseService.Services

<div class="transaction-container d-flex justify-content-center align-items-center vh-100 p-4" style="background-color: #96BCD4; max-width: 100%; border-radius: 10px;">
    <div class="card border-0 shadow-sm" style="background-color: #E1EBEE; border-radius: 10px; padding: 20px; width: 100%; max-width: 500px;">
        <h1 class="h2 mb-0 fw-bold text-black text-center">Add Transaction</h1>
        
        <div class="card-body">
            <EditForm Model="@_transaction" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- Transaction Title -->
                <div class="mb-4">
                    <label for="TransactionTitle" class="form-label fw-medium">Transaction Title</label>
                    <InputText id="TransactionTitle" class="form-control" @bind-Value="_transaction.Title"/>
                    <ValidationMessage For="@(() => _transaction.Title)"/>
                </div>

                <!-- Transaction Amount -->
                <div class="mb-4">
                    <label for="amount" class="form-label fw-medium">Transaction Amount</label>
                    <InputNumber id="amount" class="form-control" @bind-Value="_transaction.Amount" />
                    <ValidationMessage For="@(() => _transaction.Amount)" />
                </div>

                <!-- Transaction Type -->
                <div class="mb-4">
                    <label for="TransactionType" class="form-label fw-medium">Transaction Type</label>
                    <select id="TransactionType" class="form-select" @bind="_transaction.TransactionType">
                        <option value="Credit">Credit</option>
                        <option value="Debit">Debit</option>
                    </select>
                    <ValidationMessage For="@(() => _transaction.TransactionType)" />
                </div>

                <!-- Notes -->
                <div class="mb-4">
                    <label for="Notes" class="form-label fw-medium">Notes (Optional)</label>
                    <InputText id="Notes" class="form-control" @bind-Value="_transaction.Notes" />
                    <ValidationMessage For="@(() => _transaction.Notes)" />
                </div>

                <!-- Tags -->
                <div class="mb-4">
                    <label for="Tags" class="form-label fw-medium">Tags</label>
                    <select id="Tags" class="form-select" @bind="_transaction.Tags">
                        <option value="" disabled selected>Choose a tag</option>
                        <option value="Yearly">Yearly</option>
                        <option value="Monthly">Monthly</option>
                        <option value="Food">Food</option>
                        <option value="Drinks">Drinks</option>
                        <option value="Clothes">Clothes</option>
                        <option value="Gadgets">Gadgets</option>
                        <option value="Miscellaneous">Miscellaneous</option>
                        <option value="Fuel">Fuel</option>
                        <option value="Rent">Rent</option>
                        <option value="EMI">EMI</option>
                        <option value="Party">Party</option>
                    </select>
                    <ValidationMessage For="@(() => _transaction.Tags)" />
                </div>

      
                <!-- Transaction Date -->
                <div class="mb-4">
                    <label for="Date" class="form-label fw-medium">Transaction Date</label>
                    <InputDate id="Date" class="form-control" @bind-Value="_transaction.Date" />
                    <ValidationMessage For="@(() => _transaction.Date)" />
                </div>

                <!-- Buttons -->
                <div class="d-grid gap-3 d-md-flex justify-content-md-end mt-4">
                    <button type="submit" class="btn btn-primary me-md-2 px-4">Add Transaction</button>
                    <button type="button" class="btn btn-outline-secondary px-4" @onclick="ResetForm">Reset</button>
                </div>
            </EditForm>

            <!-- Status Message -->
            @if (!string.IsNullOrEmpty(_statusMessage))
            {
                <div class="mt-4 alert @(_statusMessage.Contains("error") ? "alert-danger" : "alert-success")">
                    @_statusMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    private TransactionModel _transaction = new TransactionModel();
    private string _statusMessage = string.Empty;

    private async Task OnValidSubmit()
    {
        try
        {
            // Call the SaveTransactionAsync method with the correct model type
            var success = await TransactionService.SaveTransactionAsync(_transaction);

            if (success)
            {
                _statusMessage = "Transaction added successfully!";
                NavigationManager.NavigateTo("/transaction"); // Navigate to another page if needed
            }
            else
            {
                _statusMessage = "An error occurred while adding the transaction.";
            }
        }
        catch (Exception ex)
        {
            _statusMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void ResetForm()
    {
        _transaction = new TransactionModel();
        _statusMessage = string.Empty;
    }
}